#########
# Step 1

Code affected: none

Created this file.
#########
# Step 2

Code affected: all .java files

Reformatted using the Google Java style formatter.
#########
# Step 3

Code affected: Path.leave

Flaw: unnecessary if, leading to duplicate code.

Fix: replaced if statement with a single assignment statement.
######### 
# Step 5

Code affected: 1.SwitchPath.java and TreasureHunter.java; 2.All java files.

Flaw: 1.Wrong implementations in SwitchPath, although neighbour3 is defined, but still unable to turn to the third exit because of not being used; Wrong time to change direction in TreasureHunter 2.Not using accurate access control for all classes 

Fix: 1.In SwitchPath, rewrite methods register(), unRegister(), exit(), nextPath() to fix different functionalities that end3 should has, and override the enter(); And rewrite method move() in TreasureHunter in that able to update the direction after check whether it is ok to enter or not. 2.Change all java files from default to public, add serialVersionUID.
######### 
# Step 6

Code affected: ColorUtils.java, Treasure.java

Flaw: Classes that are unnecessary for this program

Fix: Remove redundant .java file
######### 
# Step 7

Code affected: Person.java, Person1.java, Person2.java

Flaw: Redundant Person1.java and Person2.java for this program

Fix: Remove Person1.java, Person2.java and instance variable(totalWeight, forward) that are not used in Person.java, and implement addToPath() in Person.java
######### 
# Step 8

Code affected: All .java file that has a hierarchy relationship with Path

Flaw: 1.Path should be an abstract class, access control problem; 2.There are unneeded constructor in ***Path.java and **Path.java that take in only Map T as input

Fix: 1.Make them abstraction(exitOK(), register(), unRegister(), exit(), nextPath(), getDirectionInfo(), initCoordinates()) in Path, and make notations in the related class due to Path become abstract(put override above the related method to indicate the implementation of abstract method) 2.delete the unneeded constructor in these classes.
######### 
# Step 9

Code affected: Direction.java, and all .java file that will call Direction.java

Flaw: The structure of this code is gross and we need a more neat way write this class

Fix: Using enumerated type and add a DirEnum.java, and make adjustments	to all .java file that need to call Direction.java
######### 
# Step 10

Code affected: Person.java

Flaw: We need to consider more about the change of speed, there is no limit for deceleration and there is no check if deceleration is valid(e.g.if the speed is less than 2, then we should not be able to decelerate it again), thus this will cause error

Fix: Add limit for all methods related to the deceleration of speed and check if it is valid to decelerate before executing

######### 
# Step 11

Code affected: Files related with GridLoc.java(i.e. classes call GridLoc)

Flaw: 1.Wrong access control, the instance variables should be private; 2.From Java naming convention, GridLoc is not a proper name for this class 

Fix: 1.Add access control(public to private) and add setter and getter methods; 2.rename it to GridLocation, and make updates to all .java file that use GridLocation.java
######### 
# Step 12

Code affected: Person.java, TreasureHunter.java

Flaw: 1.Code is not clean that has useless part in methods and unused instance variables; 2.not proper assess control for instance  variables

Fix: 1.delete useless code and instance variables; 2. set public instance variables to private
######### 
# Step 13

Code affected: MapPanel.java

Flaw: 1.Not appropriate access control 2.Input name is not appropriate in addToPanel()

Fix: 1.Add access control, make instance variable to private; 2.change the input name.
######### 
# Step 14

Code affected: Map.java

Flaw: 1.The code is not clean and has useless parts; 2.Not appropriate access control 

Fix: 1.Refactor redundant and unclean code; 2.Add access control; 
######### 
# Step 15

Code affected: IslandSimulation.java, Person.java

Flaw: 1.The code is not clear to demonstrate the functionalities of IslandSimulation, and it has some useless code for this program; 2.Personâ€™s constructor should have a speed instance variable to be able to initialize different speed. 

Fix: 1.Refactor the code and delete the useless code in IslandSimulation; 2. Add speed input to constructor in Person.
######### 
# Step 16

Code affected: IslandSimulation.java

Flaw: Wrong about how to construct a Person since Person has already be updated to have three inputs for constructor

Fix: Change to the correct way to construct Person.